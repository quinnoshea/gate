name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: mkroening/rust-toolchain-toml@main
    - uses: Swatinem/rust-cache@v2
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Clippy
      run: cargo clippy --all-features -- -D warnings
    
    - name: Build
      run: cargo build --all-features
    
    - name: Test
      run: cargo test --all-features
  
  gui-build:
    name: GUI Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
    - uses: actions/checkout@v4
    
    # Install Rust toolchain
    - uses: mkroening/rust-toolchain-toml@main
    - uses: Swatinem/rust-cache@v2
    
    # Add WASM target
    - name: Add WASM target
      run: rustup target add wasm32-unknown-unknown
    
    # Cache cargo-installed tools
    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-trunk-tauri-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-tools-trunk-tauri-
          ${{ runner.os }}-cargo-tools-
    
    # Install build tools
    - name: Install build tools
      run: |
        # Check if trunk is already installed
        if ! command -v trunk &> /dev/null; then
          echo "Installing trunk..."
          cargo install trunk --locked
        else
          echo "trunk is already installed"
        fi
        
        # Check if tauri is already installed
        if ! command -v cargo-tauri &> /dev/null; then
          echo "Installing tauri-cli..."
          cargo install tauri-cli --locked
        else
          echo "tauri-cli is already installed"
        fi
    
    # Install tailwindcss standalone CLI
    - name: Install tailwindcss
      run: |
        # Map runner OS and arch to tailwind binary names
        case "${{ runner.os }}-${{ runner.arch }}" in
          "Linux-X64") BINARY="tailwindcss-linux-x64" ;;
          "macOS-X64") BINARY="tailwindcss-macos-x64" ;;
          "macOS-ARM64") BINARY="tailwindcss-macos-arm64" ;;
          "Windows-X64") BINARY="tailwindcss-windows-x64.exe" ;;
        esac
        
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          curl -sL "https://github.com/tailwindlabs/tailwindcss/releases/download/v4.1.11/${BINARY}" -o "$HOME/.cargo/bin/tailwindcss.exe"
        else
          curl -sL "https://github.com/tailwindlabs/tailwindcss/releases/download/v4.1.11/${BINARY}" -o /usr/local/bin/tailwindcss
          chmod +x /usr/local/bin/tailwindcss
        fi
    
    # Linux-specific dependencies
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev clang xdg-utils
    
    # Build frontends and GUI
    - name: Build GUI
      run: cd crates/gui && cargo tauri build
    
    - name: Find and prepare artifacts
      run: |
        mkdir -p artifacts
        
        # Tauri outputs to target/release/bundle
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          # macOS: Look for DMG and app bundles
          if [[ -d "target/release/bundle" ]]; then
            echo "Found macOS bundles"
            cp -r target/release/bundle/dmg/*.dmg artifacts/ 2>/dev/null || true
            cp -r target/release/bundle/macos/*.app artifacts/ 2>/dev/null || true
          fi
        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          # Linux: Look for deb and AppImage files
          if [[ -d "target/release/bundle" ]]; then
            echo "Found Linux bundles"
            cp -r target/release/bundle/deb/*.deb artifacts/ 2>/dev/null || true
            cp -r target/release/bundle/appimage/*.AppImage artifacts/ 2>/dev/null || true
          fi
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          # Windows: Look for MSI and NSIS installers
          if [[ -d "target/release/bundle" ]]; then
            echo "Found Windows bundles"
            cp -r target/release/bundle/msi/*.msi artifacts/ 2>/dev/null || true
            cp -r target/release/bundle/nsis/*.exe artifacts/ 2>/dev/null || true
          fi
        fi
        
        # List what we found
        echo "Artifacts found:"
        ls -la artifacts/ || echo "No artifacts directory"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gate-gui-${{ matrix.target }}
        path: artifacts/*
        if-no-files-found: warn
